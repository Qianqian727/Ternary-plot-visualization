import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import mpltern
from adjustText import adjust_text
from matplotlib.patches import ArrowStyle, FancyArrowPatch

from matplotlib.legend_handler import HandlerPatch

 # read data 
data = pd.read_excel('test ternary plot.xlsx', sheet_name = 'Sheet2')

t = data['RSI (Physiology)'].tolist()
l = data['RSI(CS)'].tolist()
r= data['RSI(RD)'].tolist()
labels1 = data['Country'].values.tolist()
# plot ternary
ax = plt.subplot(projection="ternary", ternary_sum=3)
ax.set_ternary_min(0.4, 0.6, 0.6)
# Specify tick positions manually.
tticks = [0.4,0.7, 1.0, 1.3, 1.6, 1.8]
lticks = [0.6, 0.9, 1.2, 1.5, 1.8, 2.1]
rticks = [0.6, 0.9, 1.2, 1.5, 1.8, 2.1]
ticks = [0.0, 0.6,  1.2,  1.8, 2.4, 3.0]
#labelst = ["0.6", " 0.9", "1.2", "1.5", "1.8", "2.1"]
#ax.taxis.set_ticks(ticks, labels = tticks)
#ax.laxis.set_ticks(ticks, labels =lticks )
#ax.raxis.set_ticks(ticks, labels =rticks )

ax.taxis.set_label_position('tick1')
ax.laxis.set_label_position('tick1')
ax.raxis.set_label_position('tick1')

### fill the polygon

t1 = [1.8, 1.4, 1.0, 1.4]
l1 = [0.6, 1.0, 1.0, 0.6]
r1 = [0.6, 0.6, 1.0, 1.0]
ax.fill(t1, l1, r1, ec="k", fc='#F27970', alpha=0.7, zorder=1)

t2 = [1.0, 1.0, 1.4]
l2 = [0.6, 1.0, 0.6]
r2 = [1.4, 1.0, 1.0]
ax.fill(t2, l2, r2, ec="k", fc='#BB9727', alpha=0.7, zorder=1)

t3 = [1.0, 1.0, 1.4]
l3 = [1.4, 1.0, 1.0]
r3 = [0.6, 1.0, 0.6]
ax.fill(t3, l3, r3, ec="k", fc='#54B345', alpha=0.7, zorder=1)

t4 = [1.0, 1.0,  0.3, 0.3]
l4 = [1.4, 1.0,  1.7, 2.1]
r4 = [0.6, 1.0,  1.0, 0.6]
ax.fill(t4, l4, r4, ec="k", fc='#32B897', alpha=0.7, zorder=1)

t5 = [0.3, 1.0, 0.3]
l5 = [1.7, 1.0, 1.0]
r5 = [1.0, 1.0, 1.7]
ax.fill(t5, l5, r5, ec="k", fc='#05B9E2', alpha=0.7, zorder=1)

t6 = [1.0, 0.3, 0.3, 1.0]
l6 = [1.0, 1.0, 0.6, 0.6]
r6 = [1.0, 1.7, 2.1, 1.4]
ax.fill(t6, l6, r6, ec="k", fc='#8983BF', alpha=0.7, zorder=1)

###### Plot the arrows

arrowstyle = ArrowStyle('simple', head_length=10, head_width=5)
kwargs_arrow = {
    'transform': ax.transAxes,  # Used with ``ax.transAxesProjection``
    'arrowstyle': arrowstyle,
    'linewidth': 1,
    'clip_on': False,  # To plot arrows outside triangle
    'zorder': -10,  # Very low value not to hide e.g. tick labels.
}

# Start of arrows in barycentric coordinates.
ta = np.array([ 0.1, -0.13,  1.0])
la = np.array([ 0.9,  0.2, -0.13])
ra = np.array([-0.13,  0.9,  0.2])

# End of arrows in barycentric coordinates.
tb = np.array([ 0.9, -0.13,  0.2])
lb = np.array([ 0.1,  1.0, -0.13])
rb = np.array([-0.13,  0.1,  1.0])

# This transforms the above barycentric coordinates to the original Axes
# coordinates. In combination with ``ax.transAxes``, we can plot arrows fixed
# to the Axes coordinates.
f = ax.transAxesProjection.transform

tarrow = FancyArrowPatch(f(ta), f(tb), ec='black', fc='black', **kwargs_arrow)
larrow = FancyArrowPatch(f(la), f(lb), ec='black', fc='black', **kwargs_arrow)
rarrow = FancyArrowPatch(f(ra), f(rb), ec='black', fc='black', **kwargs_arrow)
ax.add_patch(tarrow)
ax.add_patch(larrow)
ax.add_patch(rarrow)

# To put the axis-labels at the positions consistent with the arrows above, it
# may be better to put the axis-label-text directly as follows rather than
# using e.g.  ax.set_tlabel.
kwargs_label = {
    'transform': ax.transTernaryAxes,
    'backgroundcolor': 'w',
    'ha': 'center',
    'va': 'center',
    'rotation_mode': 'anchor',
    'zorder': -9,  # A bit higher on arrows, but still lower than others.
}

# Put axis-labels on the midpoints of arrows.
tpos = (ta + tb) * 0.5
lpos = (la + lb) * 0.5
rpos = (ra + rb) * 0.5

ax.text(*tpos, 'Physiology Studies'  , color='black', rotation=-60, **kwargs_label)
ax.text(*lpos, 'Clinical Studies' , color='black', rotation= 60, **kwargs_label)
ax.text(*rpos, 'Risk Factors & Diagnosis Techniques', color='black', rotation=  0, **kwargs_label)



### Group label
ax.text(1.7, 0.65, 0.65, 'A', ha='center', va='center')
ax.text(1.3, 1.05, 0.65, 'B', ha='center', va='center')
ax.text(1.3, 0.65, 1.05, 'C', ha='center', va='center')
ax.text(0.45, 2.0, 0.65, 'D', ha='center', va='center')
ax.text(0.45, 1.3, 1.35, 'E', ha='center', va='center')
ax.text(0.45, 0.7, 2.0, 'F', ha='center', va='center')

# show grid
#ax.grid() 

##legend
A_patch = mpatches.Patch(color='#F27970', label='Physiology Studies')
B_patch = mpatches.Patch(color='#54B345', label='Physiology Studies and Risk Factors & Diagnosis Techniques')
C_patch = mpatches.Patch(color='#BB9727', label='Physiology Studies and Clinical Studies')
D_patch = mpatches.Patch(color='#32B897', label='Risk Factors & Diagnosis Techniques')
E_patch = mpatches.Patch(color='#05B9E2', label='Clinical Studies and Risk Factors & Diagnosis Techniques')
F_patch = mpatches.Patch(color='#8983BF', label='Clinical Studies')
ax.legend(handles=[A_patch,B_patch, C_patch, D_patch, E_patch,F_patch], 
          bbox_to_anchor=(0.5, -0.52),
          loc='lower center', 
          borderaxespad=0.)
# plot scatters 
ax.scatter(t,l,r, s= 150, c= '#696969',alpha=1)
    
# plot labels
new_texts = []
for i, label1 in enumerate(labels1):
    new_text = ax.text(t[i], l[i], r[i], label1,fontsize=8, fontweight ='bold' ,ha = 'left')
    new_texts.append(new_text)
adjust_text(new_texts,
            #only_move = {'text': 'x'},
            arrowprops=dict(arrowstyle='->',color='red',lw=1.0) 
           )


plt.show()
